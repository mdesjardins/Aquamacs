(unless (featurep 'rails-test-helper)
  (load-file "../test-helper.el"))

(require 'inflections)
(rails/tests/load "ext/test-helper")

(deftest "inflections can loaded"
  (assert-nonnil inflection-singulars)
  (assert-nonnil inflection-plurals)
  (assert-nonnil inflection-irregulars)
  (assert-nonnil inflection-uncountables))

(deftest "Can add a new singular inflections rules"
  (let ((inflection-singulars inflection-singulars))
    (assert-changed (length inflection-singulars)
      (define-inflectors
        (:singular "foo$" "bar")
        (:singular "foobar$" "baz")))
    (assert-equal "testbar" (singularize-string "testfoo"))
    (assert-equal "testbaz" (singularize-string "testfoobar"))))

(deftest "Can add a new plural inflections rules"
  (let ((inflection-plurals inflection-plurals))
    (assert-changed (length inflection-plurals)
      (define-inflectors
        (:plural "foo$" "bar")
        (:plural "foobar$" "baz")))
    (assert-equal "testbar" (pluralize-string "testfoo"))
    (assert-equal "testbaz" (pluralize-string "testfoobar"))))

(deftest "Can add a new irregular inflection rules"
  (let ((inflection-irregulars inflection-irregulars))
    (assert-changed (length inflection-irregulars)
      (define-inflectors
        (:irregular "foo" "bar")
        (:irregular "foobar" "baz")))
    (assert-equal "bar" (pluralize-string "foo"))
    (assert-equal "baz" (pluralize-string "foobar"))
    (assert-equal "foo" (singularize-string "bar"))
    (assert-equal "foobar" (singularize-string "baz"))))

(deftest "Can add a new uncountable inflection rules"
  (let ((inflection-uncountables inflection-uncountables))
    (assert-changed (length inflection-uncountables)
      (define-inflectors
        (:uncountable "foo" "bar")))
    (assert-equal "foo" (pluralize-string "foo"))
    (assert-equal "foo" (singularize-string "foo"))
    (assert-equal "bar" (pluralize-string "bar"))
    (assert-equal "bar" (singularize-string "bar"))))