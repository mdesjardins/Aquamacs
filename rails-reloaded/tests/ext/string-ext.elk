(unless (featurep 'rails-test-helper)
  (load-file "../test-helper.el"))

(require 'string-ext)
(rails/tests/load "ext/test-helper")

(deftest "`string-ext/cut'"
  (assert-equal "ing" (string-ext/cut "String" "Str" :begin))
  (assert-equal "" (string-ext/cut "String" "String" :begin))

  (assert-nil (string-ext/cut "String" "Str2" :begin))
  (assert-nil (string-ext/cut "String" "String2" :begin))

  (assert-equal "Str" (string-ext/cut "String" "ing" :end))
  (assert-equal "" (string-ext/cut "String" "String" :end))

  (assert-nil (string-ext/cut "String" "ing2" :end))
  (assert-nil (string-ext/cut "String" "String2" :end)))

(deftest "`string-ext/cut-safe'"
  (assert-equal "Str" (string-ext/cut-safe "String" "ing" :end))
  (assert-equal "ing" (string-ext/cut-safe "String" "Str" :begin))
  (assert-equal "String" (string-ext/cut-safe "String" "Str" :end))
  (assert-equal "String" (string-ext/cut-safe "String" "ing" :begin)))

(deftest "`string-ext/from-symbol'"
  (assert-equal "sym" (string-ext/from-symbol :sym))
  (assert-equal "sym" (string-ext/from-symbol 'sym)))

(deftest "`string-ext/start-p'"
  (assert (string-ext/start-p "String" "Str"))
  (assert-nil (string-ext/start-p "String" "ing")))

(deftest "`string-ext/end-p'"
  (assert (string-ext/end-p "String" "ing"))
  (assert-nil (string-ext/end-p "String" "Str")))

(deftest "`string-ext/string=~'"
  (let ((str "One Two Three"))
    (assert-equal "Two" (string-ext/string=~ "\\(Two\\)" str $1))
    (assert-equal "Three" (string-ext/string=~ "\\(One\\) \\(Two\\) \\(\Three\\)" str $3))
    (assert-equal "One " (string-ext/string=~ "\\(Two\\)" str $b))
    (assert-equal " Three" (string-ext/string=~ "\\(Two\\)" str $a))
    (assert-equal "One" (string-ext/string=~ "\\(One\\)" str $m))
    (let ((re "\\(NoExist\\)"))
      (assert-nil (string-ext/string=~ re str $b))
      (assert-nil (string-ext/string=~ re str $m))
      (assert-nil (string-ext/string=~ re str $a))
      (assert-nil (string-ext/string=~ re str $$1)))))

(deftest "`string-ext/decamelize'"
  (assert-equal "CamelCase" (string-ext/decamelize "camel_case"))
  (assert-equal "Camelcase" (string-ext/decamelize "CamelCase"))
  (assert-equal "CamelCase::StrIng" (string-ext/decamelize "camel_case/str_ing"))
  (assert-equal "2camelCase::StrIng" (string-ext/decamelize "2camel_case/str_ing")))

(deftest "`string-ext/camelize'"
  (assert-equal "camel_case" (string-ext/camelize "CamelCase"))
  (assert-equal "camel_case/str_ing" (string-ext/camelize "CamelCase::StrIng"))
  (assert-equal "2camel_case/str_ing" (string-ext/camelize "2camelCase::StrIng")))

(deftest "`string-ext/camelize'"
  (assert-equal "camel_case" (string-ext/camelize "CamelCase"))
  (assert-equal "camel_case/str_ing" (string-ext/camelize "CamelCase::StrIng"))
  (assert-equal "2camel_case/str_ing" (string-ext/camelize "2camelCase::StrIng")))

(deftest "`string-ext/empty-p'"
  (assert (string-ext/empty-p ""))
  (assert (string-ext/empty-p "  "))
  (assert-nil (string-ext/empty-p " as ")))

(deftest "`string-ext/safe-symbol'"
  (assert-equal 'test (string-ext/safe-symbol "Test"))
  (assert-equal 'test-foo (string-ext/safe-symbol "Test Foo")))
